<style>a{	text-decoration: none;}#main{	width: 700px;	margin: 100px auto; 	background-color: pink;	border: 1px solid red;	border-radius: 5px 5px;	padding: 10px;}#filter{	background-color: red;	padding: 5px;}#breadcrumbs{	margin-top: 3px;	background-color: yellow;	padding: 1px;}#files{	background-color: rgb(115, 214, 115);}</style><?php $instance = FileManager::getInstance();echo "<div id='main'>";$instance->run();echo "</div>";class FileManager{		/**	 * 	 * @var instance of a class	 */	private static $_instance;		/**	 * Filter's action, order by	 * @var unknown	 */	private $action;		/*	 * values for action filter	 */	const ORDER_BY_NAME = 'n';	const ORDER_BY_SIZE = 's';	const ORDER_BY_TYPE = 't';		/**	 * values for checboxes	 * @var array	 */	public static $checboxes = array(self::ORDER_BY_NAME=>'Name', self::ORDER_BY_SIZE=>'Size', self::ORDER_BY_TYPE=>'Type');		/**	 * current path	 * @var unknown	 */	private $path;		/**	 * previous path (need for back .. button)	 * @var string	 */	private $previousPage = null;		/**	 * value from order by filter	 * @var string	 */	private $order;		/**	 * values for order by direction	 * @var string	 */	const ORDER_DESC = 'desc';	const ORDER_ASC = 'asc';		/**	 * path for previous action (need for changing filter direction)	 * @var string	 */	private $prev_action;		private function __construct(){}		private function __clone(){}		/**	 * return instance for class	 * @return FileManager	 */		public static function getInstance(){		if(empty(self::$_instance)){			self::$_instance = new static();			self::$_instance->setParameters();		}		return self::$_instance;	}		/**	 * setter for previous page	 * @param string $path	 */	public function setPreviousPage($path){		$this->previousPage = $path;	}		/**	 * getter for previous page	 * @return string	 */	public function getPreviousPage(){		return $this->previousPage;	}		/**	 * setter for current path	 * @param string $path	 */	public function setPath($path){		$this->path = $path;	}		/**	 * getter for current path	 * return string	 */		public function getPath(){		return $this->path;	}		/**	 * setter for action (value from filter)	 * @param string  $action	 */	public function setAction($action){		$this->action = $action;			}		/**	 * getter for action variable	 * @return string	 */	public function getAction(){		return $this->action;	}		/**	 * retrun default path, when script loads the first time or without get parameters	 * @return string	 */	protected function getDefaultPath(){		$scriptPath = $_SERVER['SCRIPT_FILENAME'];		return substr($scriptPath, 0,  strripos($scriptPath, "/"));	}		/**	 * set parameters for class form get request	 */	public function setParameters(){		$dir = $_GET['path'] ? $_GET['path'] : $this->getDefaultPath();		$this->setPath($dir);		$position = strripos($dir, "/");		if(!empty($position)){			$this->setPreviousPage(substr($dir, 0, $position));		}		$action = $_GET['action'] ? $_GET['action'] : static::ORDER_BY_NAME;		$this->setAction($action); 		$order = $_GET['order'] ? $_GET['order'] : static::ORDER_DESC;		$prevAction = $_GET['prev_action'] ? $_GET['prev_action'] : static::ORDER_BY_NAME;		if($action == $prevAction){			$order = $order == static::ORDER_ASC ? static::ORDER_DESC : static::ORDER_ASC;		}		$this->setOrder($order);	}		/**	 * setter for order variable (order changes in filters)	 * @param string $order	 */	public function setOrder($order){		$this->order = $order;	}		/**	 * getter for order variable	 * @return string	 */	public function getOrder(){		return $this->order;	}		/**	 * function for ordering by the file name, order selection occurs in the filter block	 * @param array $arr	 * @param string $order	 * @return array	 */		public static function orderByName($arr, $order){		$func = ( $order == static::ORDER_DESC) ? 'krsort' : 'ksort';		$func($arr);			return $arr;	}		/**	 * function for ordering by the file type, order selection occurs in the filter block	 * @param array $arr	 * @param string $order	 * @return array	 */	public static function orderByType($arr, $order){		return static::sortBy($arr, 'filetype', $order);	}		/**	 * function for ordering by the file size, order selection occurs in the filter block	 * @param array $arr	 * @param string $order	 * @return array	 */		public static function orderBySize($arr, $order){		return static::sortBy($arr, 'filesize', $order);	}		/**	 * a main sorting function, uses for sorting sorting two-dimensional array	 * with the current folder information by the size or by the type	 * @param array $arr	 * @param string $sortField	 * @param string $direction	 * @return array	 */	public static function sortBy($arr, $sortField, $direction){		$finishedArray = array();		$temp = array(); 		foreach($arr as $k=>$val){			$temp[$k] = $val[$sortField]; 		}		$func = ( $direction == static::ORDER_DESC) ? 'arsort' : 'asort';		$func($temp);		foreach($temp as $k=>$val){			$finishedArray[$k] = $arr[$k];		}		return $finishedArray;	}		/**	 * function for getting information about folders and types from the current directory	 * @return array	 */	public function getDirContent(){		$files = array();		if ($handle = opendir($this->getPath())) {			while (false !== ($entry = readdir($handle))) {				if ($entry == "." || $entry == "..") continue;				$fullPath = $this->path."\\".$entry;				if(is_dir($fullPath)){					$files[$entry] = array('is_file' => false, 'filesize' => null, 'filetype' => null);					continue;				}				if(!is_dir($fullPath) && is_file($fullPath)){					$files[$entry]['is_file'] = true;					$files[$entry]['filesize'] = filesize($fullPath);					$files[$entry]['filetype'] = pathinfo($fullPath, PATHINFO_EXTENSION);				}			}		}		return $files;		}		/**	 * function, which print form for the order by filter	 */	private function printFilter(){		echo "<div id='filter'><p>";		echo "<form action='' method='get'>";		echo "<label for='action'>Order by</label>";		echo "<input type='hidden' name='path' value='".$this->getPath()."'>";		echo "<input type='hidden' name='order' value='".$this->getOrder()."'>";		echo "<input type='hidden' name='prev_action' value='".$this->getAction()."'>";		foreach (self::$checboxes as $value=>$label){			$checked = $value == $this->action ? 'checked' : '';			echo "<input name='action' type='radio' value='".$value."' ".$checked.">".$label."</input>";		}		echo "&nbsp&nbsp<input type='submit' value='Filter'/>";		echo "</form></p></div>";	}		/**	 * switch for order by selection	 * @return array	 */		protected function getReadyContent(){		$dirContent = $this->getDirContent();		switch($this->action){			case self::ORDER_BY_NAME:				return  static::orderByName($dirContent, $this->getOrder());			case self::ORDER_BY_SIZE:				return static::orderBySize($dirContent, $this->getOrder());			case self::ORDER_BY_TYPE:				return static::orderByType($dirContent, $this->getOrder());			default:				return $dirContent;		}	}		public function run(){		$this->printFilter();		//echo '<pre>',print_r($this->getReadyContent()),'</pre>';		$this->printBreadCrumbs();		$this->printFileMenu();	}		/**	 * function for printing the main menu( menu with file and folder list)	 */	protected function printFileMenu(){		echo "<div id='files'><p><ul>";		if($this->getPreviousPage()){			echo "<li>";			echo "<a href='".$_SERVER["SCRIPT_NAME"]."?path=".urlencode($this->getPreviousPage())."'>..</a>";			echo "</li>";		}		foreach($this->getReadyContent() as $filename=>$info){			echo "<li>";			if(!$info['is_file']){				echo "<a href='".$_SERVER["SCRIPT_NAME"]."?path=".urlencode($this->getPath()."/".$filename)."'>".$filename."</a>";			}else echo $filename." (".$info['filesize']." byte)";			echo "</li>";		}		echo "</ul></p></div>";	}		/**	 * create array with lins for bread crumbs	 * @param string $string current path	 * @param array $array links	 * @return array	 */	public static function returnLinksArray($string, $array){		$pos = strrpos($string, "/");		if($pos === false){			$array[] = array($string, $string);			return $array;		}		$str = substr($string, 0, $pos);		$name = substr($string, $pos);		$array[] = array($name, $str.$name);		return static::returnLinksArray($str, $array);		}		/**	 * print breadcrumbs	 */	protected function printBreadCrumbs(){		$links = array();		$links = array_reverse(static::returnLinksArray($this->getPath(), $links));		echo "<div id='breadcrumbs'><p>";		foreach ($links as $link){			echo "&nbsp&nbsp&nbsp<a href='".$_SERVER["SCRIPT_NAME"]."?path=".$link[1]."'>".$link[0]."</a>";		}		echo "</p></div>";	}}?>